// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  credits           Int                 @default(10)
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  project           Project[]
  ProjectMembership ProjectMembership[]
  Task              Task[]
  projetOwner       ProjectMembership[] @relation("ProjetOwner")
  // reporter          Task[]              @relation("Reporter")
  assignee          Task[]              @relation("Assignee")

  @@index([email])
}

enum Role {
  ADMIN
  MEMBER
}

enum TaskPriorityRole {
  NO_Priority
  URGENT
  HIGH
  MEDIUM
  LOW
}

model Post {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  checked   Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Project {
  id                String              @id @default(cuid())
  owner             User?               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String?
  projectName       String              @db.VarChar(256)
  slug              String              @unique @db.VarChar(256)
  task              Task[]
  projectMembership ProjectMembership[]
  taskStatus        TaskStatus[]
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime            @updatedAt @db.Timestamptz(3)
}

model ProjectMembership {
  id            String    @id @default(cuid())
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String    @unique
  role          Role      @default(ADMIN)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  dateJoined    DateTime  @default(now()) @db.Timestamptz(3)
  dateLeft      DateTime? @db.Timestamptz(3)
  projetOwner   User      @relation("ProjetOwner", fields: [projetOwnerId], references: [id], onDelete: Cascade)
  projetOwnerId String
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(3)

  @@index([projectId, userId, projetOwnerId])
}

model Task {
  id          String           @id @default(cuid())
  taskName    String           @unique
  description String           @default("")
  Project     Project?         @relation(fields: [projectId], references: [id])
  projectId   String?
  // reporter    User?            @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  // reporterId  String?
  assignee    User             @relation("Assignee", fields: [assigneeId], references: [id], onDelete: Cascade)
  assigneeId  String
  Author      User?            @relation(fields: [authorId], references: [id])
  authorId    String
  priority    TaskPriorityRole @default(NO_Priority)
  status      String
  taskStatus  TaskStatus[]
  createdAt   DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime         @updatedAt @db.Timestamptz(3)

  @@index([taskName, projectId])
}

model TaskStatus {
  id        String   @id @default(cuid())
  name      String
  Project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?
  active    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@index([projectId])
}
